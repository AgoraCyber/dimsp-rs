// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sync.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SyncMessage)
pub struct SyncMessage {
    // message oneof groups
    pub content: ::std::option::Option<sync_message::Content>,
    // special fields
    // @@protoc_insertion_point(special_field:SyncMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SyncMessage {
    fn default() -> &'a SyncMessage {
        <SyncMessage as ::protobuf::Message>::default_instance()
    }
}

impl SyncMessage {
    pub fn new() -> SyncMessage {
        ::std::default::Default::default()
    }

    // .Handshake handshake = 1;

    pub fn handshake(&self) -> &Handshake {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::Handshake(ref v)) => v,
            _ => <Handshake as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_handshake(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_handshake(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::Handshake(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_handshake(&mut self, v: Handshake) {
        self.content = ::std::option::Option::Some(sync_message::Content::Handshake(v))
    }

    // Mutable pointer to the field.
    pub fn mut_handshake(&mut self) -> &mut Handshake {
        if let ::std::option::Option::Some(sync_message::Content::Handshake(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::Handshake(Handshake::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::Handshake(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_handshake(&mut self) -> Handshake {
        if self.has_handshake() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::Handshake(v)) => v,
                _ => panic!(),
            }
        } else {
            Handshake::new()
        }
    }

    // .OpenStream open_stream = 2;

    pub fn open_stream(&self) -> &OpenStream {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::OpenStream(ref v)) => v,
            _ => <OpenStream as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_open_stream(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_open_stream(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::OpenStream(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_open_stream(&mut self, v: OpenStream) {
        self.content = ::std::option::Option::Some(sync_message::Content::OpenStream(v))
    }

    // Mutable pointer to the field.
    pub fn mut_open_stream(&mut self) -> &mut OpenStream {
        if let ::std::option::Option::Some(sync_message::Content::OpenStream(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::OpenStream(OpenStream::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::OpenStream(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_open_stream(&mut self) -> OpenStream {
        if self.has_open_stream() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::OpenStream(v)) => v,
                _ => panic!(),
            }
        } else {
            OpenStream::new()
        }
    }

    // .CloseStream close_stream = 3;

    pub fn close_stream(&self) -> &CloseStream {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::CloseStream(ref v)) => v,
            _ => <CloseStream as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_close_stream(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_close_stream(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::CloseStream(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_close_stream(&mut self, v: CloseStream) {
        self.content = ::std::option::Option::Some(sync_message::Content::CloseStream(v))
    }

    // Mutable pointer to the field.
    pub fn mut_close_stream(&mut self) -> &mut CloseStream {
        if let ::std::option::Option::Some(sync_message::Content::CloseStream(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::CloseStream(CloseStream::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::CloseStream(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_close_stream(&mut self) -> CloseStream {
        if self.has_close_stream() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::CloseStream(v)) => v,
                _ => panic!(),
            }
        } else {
            CloseStream::new()
        }
    }

    // .WriteData write_data = 4;

    pub fn write_data(&self) -> &WriteData {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::WriteData(ref v)) => v,
            _ => <WriteData as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_write_data(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_write_data(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::WriteData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_write_data(&mut self, v: WriteData) {
        self.content = ::std::option::Option::Some(sync_message::Content::WriteData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_write_data(&mut self) -> &mut WriteData {
        if let ::std::option::Option::Some(sync_message::Content::WriteData(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::WriteData(WriteData::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::WriteData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_write_data(&mut self) -> WriteData {
        if self.has_write_data() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::WriteData(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteData::new()
        }
    }

    // .QosFragment fragment = 5;

    pub fn fragment(&self) -> &QosFragment {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::Fragment(ref v)) => v,
            _ => <QosFragment as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fragment(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_fragment(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::Fragment(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fragment(&mut self, v: QosFragment) {
        self.content = ::std::option::Option::Some(sync_message::Content::Fragment(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fragment(&mut self) -> &mut QosFragment {
        if let ::std::option::Option::Some(sync_message::Content::Fragment(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::Fragment(QosFragment::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::Fragment(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fragment(&mut self) -> QosFragment {
        if self.has_fragment() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::Fragment(v)) => v,
                _ => panic!(),
            }
        } else {
            QosFragment::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Handshake>(
            "handshake",
            SyncMessage::has_handshake,
            SyncMessage::handshake,
            SyncMessage::mut_handshake,
            SyncMessage::set_handshake,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, OpenStream>(
            "open_stream",
            SyncMessage::has_open_stream,
            SyncMessage::open_stream,
            SyncMessage::mut_open_stream,
            SyncMessage::set_open_stream,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CloseStream>(
            "close_stream",
            SyncMessage::has_close_stream,
            SyncMessage::close_stream,
            SyncMessage::mut_close_stream,
            SyncMessage::set_close_stream,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, WriteData>(
            "write_data",
            SyncMessage::has_write_data,
            SyncMessage::write_data,
            SyncMessage::mut_write_data,
            SyncMessage::set_write_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, QosFragment>(
            "fragment",
            SyncMessage::has_fragment,
            SyncMessage::fragment,
            SyncMessage::mut_fragment,
            SyncMessage::set_fragment,
        ));
        oneofs.push(sync_message::Content::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SyncMessage>(
            "SyncMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SyncMessage {
    const NAME: &'static str = "SyncMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::Handshake(is.read_message()?));
                },
                18 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::OpenStream(is.read_message()?));
                },
                26 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::CloseStream(is.read_message()?));
                },
                34 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::WriteData(is.read_message()?));
                },
                42 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::Fragment(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &sync_message::Content::Handshake(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_message::Content::OpenStream(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_message::Content::CloseStream(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_message::Content::WriteData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_message::Content::Fragment(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &sync_message::Content::Handshake(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &sync_message::Content::OpenStream(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &sync_message::Content::CloseStream(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &sync_message::Content::WriteData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &sync_message::Content::Fragment(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SyncMessage {
        SyncMessage::new()
    }

    fn clear(&mut self) {
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SyncMessage {
        static instance: SyncMessage = SyncMessage {
            content: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SyncMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SyncMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SyncMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SyncMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SyncMessage`
pub mod sync_message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:SyncMessage.content)
    pub enum Content {
        // @@protoc_insertion_point(oneof_field:SyncMessage.handshake)
        Handshake(super::Handshake),
        // @@protoc_insertion_point(oneof_field:SyncMessage.open_stream)
        OpenStream(super::OpenStream),
        // @@protoc_insertion_point(oneof_field:SyncMessage.close_stream)
        CloseStream(super::CloseStream),
        // @@protoc_insertion_point(oneof_field:SyncMessage.write_data)
        WriteData(super::WriteData),
        // @@protoc_insertion_point(oneof_field:SyncMessage.fragment)
        Fragment(super::QosFragment),
    }

    impl ::protobuf::Oneof for Content {
    }

    impl ::protobuf::OneofFull for Content {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::SyncMessage as ::protobuf::MessageFull>::descriptor().oneof_by_name("content").unwrap()).clone()
        }
    }

    impl Content {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Content>("content")
        }
    }
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:SyncMessage.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.Handshake)
        Handshake = 0,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.OpenStream)
        OpenStream = 1,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.CloseStream)
        CloseStream = 2,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.WriteData)
        WriteData = 3,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.QosFragment)
        QosFragment = 4,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.QosKeepAlive)
        QosKeepAlive = 5,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::Handshake),
                1 => ::std::option::Option::Some(Type::OpenStream),
                2 => ::std::option::Option::Some(Type::CloseStream),
                3 => ::std::option::Option::Some(Type::WriteData),
                4 => ::std::option::Option::Some(Type::QosFragment),
                5 => ::std::option::Option::Some(Type::QosKeepAlive),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::Handshake,
            Type::OpenStream,
            Type::CloseStream,
            Type::WriteData,
            Type::QosFragment,
            Type::QosKeepAlive,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("SyncMessage.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::Handshake
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("SyncMessage.Type")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Handshake)
pub struct Handshake {
    // message fields
    // @@protoc_insertion_point(field:Handshake.endpoint_id)
    pub endpoint_id: ::protobuf::MessageField<Hash32>,
    // @@protoc_insertion_point(field:Handshake.send_seq_id)
    pub send_seq_id: u64,
    // @@protoc_insertion_point(field:Handshake.recv_seq_id)
    pub recv_seq_id: u64,
    // special fields
    // @@protoc_insertion_point(special_field:Handshake.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Handshake {
    fn default() -> &'a Handshake {
        <Handshake as ::protobuf::Message>::default_instance()
    }
}

impl Handshake {
    pub fn new() -> Handshake {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Hash32>(
            "endpoint_id",
            |m: &Handshake| { &m.endpoint_id },
            |m: &mut Handshake| { &mut m.endpoint_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "send_seq_id",
            |m: &Handshake| { &m.send_seq_id },
            |m: &mut Handshake| { &mut m.send_seq_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "recv_seq_id",
            |m: &Handshake| { &m.recv_seq_id },
            |m: &mut Handshake| { &mut m.recv_seq_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Handshake>(
            "Handshake",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Handshake {
    const NAME: &'static str = "Handshake";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.endpoint_id)?;
                },
                16 => {
                    self.send_seq_id = is.read_uint64()?;
                },
                24 => {
                    self.recv_seq_id = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.endpoint_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.send_seq_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.send_seq_id);
        }
        if self.recv_seq_id != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.recv_seq_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.endpoint_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.send_seq_id != 0 {
            os.write_uint64(2, self.send_seq_id)?;
        }
        if self.recv_seq_id != 0 {
            os.write_uint64(3, self.recv_seq_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Handshake {
        Handshake::new()
    }

    fn clear(&mut self) {
        self.endpoint_id.clear();
        self.send_seq_id = 0;
        self.recv_seq_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Handshake {
        static instance: Handshake = Handshake {
            endpoint_id: ::protobuf::MessageField::none(),
            send_seq_id: 0,
            recv_seq_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Handshake {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Handshake").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Handshake {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Handshake {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OpenStream)
pub struct OpenStream {
    // message fields
    // @@protoc_insertion_point(field:OpenStream.seq_id)
    pub seq_id: u64,
    // @@protoc_insertion_point(field:OpenStream.to)
    pub to: u64,
    // @@protoc_insertion_point(field:OpenStream.force)
    pub force: bool,
    // @@protoc_insertion_point(field:OpenStream.length)
    pub length: u64,
    // @@protoc_insertion_point(field:OpenStream.msg_hash32)
    pub msg_hash32: ::protobuf::MessageField<Hash32>,
    // @@protoc_insertion_point(field:OpenStream.fragment_hash32s)
    pub fragment_hash32s: ::std::vec::Vec<Hash32>,
    // @@protoc_insertion_point(field:OpenStream.payload)
    pub payload: ::protobuf::MessageField<WriteData>,
    // special fields
    // @@protoc_insertion_point(special_field:OpenStream.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OpenStream {
    fn default() -> &'a OpenStream {
        <OpenStream as ::protobuf::Message>::default_instance()
    }
}

impl OpenStream {
    pub fn new() -> OpenStream {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seq_id",
            |m: &OpenStream| { &m.seq_id },
            |m: &mut OpenStream| { &mut m.seq_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to",
            |m: &OpenStream| { &m.to },
            |m: &mut OpenStream| { &mut m.to },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "force",
            |m: &OpenStream| { &m.force },
            |m: &mut OpenStream| { &mut m.force },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "length",
            |m: &OpenStream| { &m.length },
            |m: &mut OpenStream| { &mut m.length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Hash32>(
            "msg_hash32",
            |m: &OpenStream| { &m.msg_hash32 },
            |m: &mut OpenStream| { &mut m.msg_hash32 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fragment_hash32s",
            |m: &OpenStream| { &m.fragment_hash32s },
            |m: &mut OpenStream| { &mut m.fragment_hash32s },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, WriteData>(
            "payload",
            |m: &OpenStream| { &m.payload },
            |m: &mut OpenStream| { &mut m.payload },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OpenStream>(
            "OpenStream",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OpenStream {
    const NAME: &'static str = "OpenStream";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seq_id = is.read_uint64()?;
                },
                16 => {
                    self.to = is.read_uint64()?;
                },
                24 => {
                    self.force = is.read_bool()?;
                },
                32 => {
                    self.length = is.read_uint64()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.msg_hash32)?;
                },
                50 => {
                    self.fragment_hash32s.push(is.read_message()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.payload)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.seq_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.seq_id);
        }
        if self.to != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.to);
        }
        if self.force != false {
            my_size += 1 + 1;
        }
        if self.length != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.length);
        }
        if let Some(v) = self.msg_hash32.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.fragment_hash32s {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.payload.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.seq_id != 0 {
            os.write_uint64(1, self.seq_id)?;
        }
        if self.to != 0 {
            os.write_uint64(2, self.to)?;
        }
        if self.force != false {
            os.write_bool(3, self.force)?;
        }
        if self.length != 0 {
            os.write_uint64(4, self.length)?;
        }
        if let Some(v) = self.msg_hash32.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        for v in &self.fragment_hash32s {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if let Some(v) = self.payload.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OpenStream {
        OpenStream::new()
    }

    fn clear(&mut self) {
        self.seq_id = 0;
        self.to = 0;
        self.force = false;
        self.length = 0;
        self.msg_hash32.clear();
        self.fragment_hash32s.clear();
        self.payload.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OpenStream {
        static instance: OpenStream = OpenStream {
            seq_id: 0,
            to: 0,
            force: false,
            length: 0,
            msg_hash32: ::protobuf::MessageField::none(),
            fragment_hash32s: ::std::vec::Vec::new(),
            payload: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OpenStream {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OpenStream").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OpenStream {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OpenStream {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CloseStream)
pub struct CloseStream {
    // message fields
    // @@protoc_insertion_point(field:CloseStream.seq_id)
    pub seq_id: u64,
    // @@protoc_insertion_point(field:CloseStream.to)
    pub to: u64,
    // @@protoc_insertion_point(field:CloseStream.flush)
    pub flush: bool,
    // special fields
    // @@protoc_insertion_point(special_field:CloseStream.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CloseStream {
    fn default() -> &'a CloseStream {
        <CloseStream as ::protobuf::Message>::default_instance()
    }
}

impl CloseStream {
    pub fn new() -> CloseStream {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seq_id",
            |m: &CloseStream| { &m.seq_id },
            |m: &mut CloseStream| { &mut m.seq_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to",
            |m: &CloseStream| { &m.to },
            |m: &mut CloseStream| { &mut m.to },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flush",
            |m: &CloseStream| { &m.flush },
            |m: &mut CloseStream| { &mut m.flush },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CloseStream>(
            "CloseStream",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CloseStream {
    const NAME: &'static str = "CloseStream";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seq_id = is.read_uint64()?;
                },
                16 => {
                    self.to = is.read_uint64()?;
                },
                24 => {
                    self.flush = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.seq_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.seq_id);
        }
        if self.to != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.to);
        }
        if self.flush != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.seq_id != 0 {
            os.write_uint64(1, self.seq_id)?;
        }
        if self.to != 0 {
            os.write_uint64(2, self.to)?;
        }
        if self.flush != false {
            os.write_bool(3, self.flush)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CloseStream {
        CloseStream::new()
    }

    fn clear(&mut self) {
        self.seq_id = 0;
        self.to = 0;
        self.flush = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CloseStream {
        static instance: CloseStream = CloseStream {
            seq_id: 0,
            to: 0,
            flush: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CloseStream {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CloseStream").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CloseStream {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloseStream {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:WriteData)
pub struct WriteData {
    // message fields
    // @@protoc_insertion_point(field:WriteData.seq_id)
    pub seq_id: u64,
    // @@protoc_insertion_point(field:WriteData.fragment_id)
    pub fragment_id: u64,
    // @@protoc_insertion_point(field:WriteData.payload)
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:WriteData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WriteData {
    fn default() -> &'a WriteData {
        <WriteData as ::protobuf::Message>::default_instance()
    }
}

impl WriteData {
    pub fn new() -> WriteData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seq_id",
            |m: &WriteData| { &m.seq_id },
            |m: &mut WriteData| { &mut m.seq_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fragment_id",
            |m: &WriteData| { &m.fragment_id },
            |m: &mut WriteData| { &mut m.fragment_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload",
            |m: &WriteData| { &m.payload },
            |m: &mut WriteData| { &mut m.payload },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WriteData>(
            "WriteData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WriteData {
    const NAME: &'static str = "WriteData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seq_id = is.read_uint64()?;
                },
                16 => {
                    self.fragment_id = is.read_uint64()?;
                },
                26 => {
                    self.payload = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.seq_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.seq_id);
        }
        if self.fragment_id != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.fragment_id);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.seq_id != 0 {
            os.write_uint64(1, self.seq_id)?;
        }
        if self.fragment_id != 0 {
            os.write_uint64(2, self.fragment_id)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(3, &self.payload)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WriteData {
        WriteData::new()
    }

    fn clear(&mut self) {
        self.seq_id = 0;
        self.fragment_id = 0;
        self.payload.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WriteData {
        static instance: WriteData = WriteData {
            seq_id: 0,
            fragment_id: 0,
            payload: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WriteData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WriteData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WriteData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:QosFragment)
pub struct QosFragment {
    // message fields
    // @@protoc_insertion_point(field:QosFragment.seq_id)
    pub seq_id: u64,
    // @@protoc_insertion_point(field:QosFragment.to)
    pub to: u64,
    // @@protoc_insertion_point(field:QosFragment.sync_fragment)
    pub sync_fragment: u64,
    // @@protoc_insertion_point(field:QosFragment.msg_hash32)
    pub msg_hash32: ::protobuf::MessageField<Hash32>,
    // special fields
    // @@protoc_insertion_point(special_field:QosFragment.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QosFragment {
    fn default() -> &'a QosFragment {
        <QosFragment as ::protobuf::Message>::default_instance()
    }
}

impl QosFragment {
    pub fn new() -> QosFragment {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seq_id",
            |m: &QosFragment| { &m.seq_id },
            |m: &mut QosFragment| { &mut m.seq_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to",
            |m: &QosFragment| { &m.to },
            |m: &mut QosFragment| { &mut m.to },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sync_fragment",
            |m: &QosFragment| { &m.sync_fragment },
            |m: &mut QosFragment| { &mut m.sync_fragment },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Hash32>(
            "msg_hash32",
            |m: &QosFragment| { &m.msg_hash32 },
            |m: &mut QosFragment| { &mut m.msg_hash32 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QosFragment>(
            "QosFragment",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QosFragment {
    const NAME: &'static str = "QosFragment";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seq_id = is.read_uint64()?;
                },
                16 => {
                    self.to = is.read_uint64()?;
                },
                24 => {
                    self.sync_fragment = is.read_uint64()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.msg_hash32)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.seq_id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.seq_id);
        }
        if self.to != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.to);
        }
        if self.sync_fragment != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.sync_fragment);
        }
        if let Some(v) = self.msg_hash32.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.seq_id != 0 {
            os.write_uint64(1, self.seq_id)?;
        }
        if self.to != 0 {
            os.write_uint64(2, self.to)?;
        }
        if self.sync_fragment != 0 {
            os.write_uint64(3, self.sync_fragment)?;
        }
        if let Some(v) = self.msg_hash32.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QosFragment {
        QosFragment::new()
    }

    fn clear(&mut self) {
        self.seq_id = 0;
        self.to = 0;
        self.sync_fragment = 0;
        self.msg_hash32.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QosFragment {
        static instance: QosFragment = QosFragment {
            seq_id: 0,
            to: 0,
            sync_fragment: 0,
            msg_hash32: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QosFragment {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QosFragment").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QosFragment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QosFragment {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Hash32)
pub struct Hash32 {
    // message fields
    // @@protoc_insertion_point(field:Hash32.h1)
    pub h1: u64,
    // @@protoc_insertion_point(field:Hash32.h2)
    pub h2: u64,
    // @@protoc_insertion_point(field:Hash32.h3)
    pub h3: u64,
    // @@protoc_insertion_point(field:Hash32.h4)
    pub h4: u64,
    // special fields
    // @@protoc_insertion_point(special_field:Hash32.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Hash32 {
    fn default() -> &'a Hash32 {
        <Hash32 as ::protobuf::Message>::default_instance()
    }
}

impl Hash32 {
    pub fn new() -> Hash32 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "h1",
            |m: &Hash32| { &m.h1 },
            |m: &mut Hash32| { &mut m.h1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "h2",
            |m: &Hash32| { &m.h2 },
            |m: &mut Hash32| { &mut m.h2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "h3",
            |m: &Hash32| { &m.h3 },
            |m: &mut Hash32| { &mut m.h3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "h4",
            |m: &Hash32| { &m.h4 },
            |m: &mut Hash32| { &mut m.h4 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Hash32>(
            "Hash32",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Hash32 {
    const NAME: &'static str = "Hash32";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.h1 = is.read_uint64()?;
                },
                16 => {
                    self.h2 = is.read_uint64()?;
                },
                24 => {
                    self.h3 = is.read_uint64()?;
                },
                32 => {
                    self.h4 = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.h1 != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.h1);
        }
        if self.h2 != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.h2);
        }
        if self.h3 != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.h3);
        }
        if self.h4 != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.h4);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.h1 != 0 {
            os.write_uint64(1, self.h1)?;
        }
        if self.h2 != 0 {
            os.write_uint64(2, self.h2)?;
        }
        if self.h3 != 0 {
            os.write_uint64(3, self.h3)?;
        }
        if self.h4 != 0 {
            os.write_uint64(4, self.h4)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Hash32 {
        Hash32::new()
    }

    fn clear(&mut self) {
        self.h1 = 0;
        self.h2 = 0;
        self.h3 = 0;
        self.h4 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Hash32 {
        static instance: Hash32 = Hash32 {
            h1: 0,
            h2: 0,
            h3: 0,
            h4: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Hash32 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Hash32").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Hash32 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Hash32 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nsync.proto\"\xea\x02\n\x0bSyncMessage\x12*\n\thandshake\x18\x01\x20\
    \x01(\x0b2\n.HandshakeH\0R\thandshake\x12.\n\x0bopen_stream\x18\x02\x20\
    \x01(\x0b2\x0b.OpenStreamH\0R\nopenStream\x121\n\x0cclose_stream\x18\x03\
    \x20\x01(\x0b2\x0c.CloseStreamH\0R\x0bcloseStream\x12+\n\nwrite_data\x18\
    \x04\x20\x01(\x0b2\n.WriteDataH\0R\twriteData\x12*\n\x08fragment\x18\x05\
    \x20\x01(\x0b2\x0c.QosFragmentH\0R\x08fragment\"h\n\x04Type\x12\r\n\tHan\
    dshake\x10\0\x12\x0e\n\nOpenStream\x10\x01\x12\x0f\n\x0bCloseStream\x10\
    \x02\x12\r\n\tWriteData\x10\x03\x12\x0f\n\x0bQosFragment\x10\x04\x12\x10\
    \n\x0cQosKeepAlive\x10\x05B\t\n\x07content\"u\n\tHandshake\x12(\n\x0bend\
    point_id\x18\x01\x20\x01(\x0b2\x07.Hash32R\nendpointId\x12\x1e\n\x0bsend\
    _seq_id\x18\x02\x20\x01(\x04R\tsendSeqId\x12\x1e\n\x0brecv_seq_id\x18\
    \x03\x20\x01(\x04R\trecvSeqId\"\xe3\x01\n\nOpenStream\x12\x15\n\x06seq_i\
    d\x18\x01\x20\x01(\x04R\x05seqId\x12\x0e\n\x02to\x18\x02\x20\x01(\x04R\
    \x02to\x12\x14\n\x05force\x18\x03\x20\x01(\x08R\x05force\x12\x16\n\x06le\
    ngth\x18\x04\x20\x01(\x04R\x06length\x12&\n\nmsg_hash32\x18\x05\x20\x01(\
    \x0b2\x07.Hash32R\tmsgHash32\x122\n\x10fragment_hash32s\x18\x06\x20\x03(\
    \x0b2\x07.Hash32R\x0ffragmentHash32s\x12$\n\x07payload\x18\x07\x20\x01(\
    \x0b2\n.WriteDataR\x07payload\"J\n\x0bCloseStream\x12\x15\n\x06seq_id\
    \x18\x01\x20\x01(\x04R\x05seqId\x12\x0e\n\x02to\x18\x02\x20\x01(\x04R\
    \x02to\x12\x14\n\x05flush\x18\x03\x20\x01(\x08R\x05flush\"]\n\tWriteData\
    \x12\x15\n\x06seq_id\x18\x01\x20\x01(\x04R\x05seqId\x12\x1f\n\x0bfragmen\
    t_id\x18\x02\x20\x01(\x04R\nfragmentId\x12\x18\n\x07payload\x18\x03\x20\
    \x01(\x0cR\x07payload\"\x81\x01\n\x0bQosFragment\x12\x15\n\x06seq_id\x18\
    \x01\x20\x01(\x04R\x05seqId\x12\x0e\n\x02to\x18\x02\x20\x01(\x04R\x02to\
    \x12#\n\rsync_fragment\x18\x03\x20\x01(\x04R\x0csyncFragment\x12&\n\nmsg\
    _hash32\x18\x04\x20\x01(\x0b2\x07.Hash32R\tmsgHash32\"H\n\x06Hash32\x12\
    \x0e\n\x02h1\x18\x01\x20\x01(\x04R\x02h1\x12\x0e\n\x02h2\x18\x02\x20\x01\
    (\x04R\x02h2\x12\x0e\n\x02h3\x18\x03\x20\x01(\x04R\x02h3\x12\x0e\n\x02h4\
    \x18\x04\x20\x01(\x04R\x02h4b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(SyncMessage::generated_message_descriptor_data());
            messages.push(Handshake::generated_message_descriptor_data());
            messages.push(OpenStream::generated_message_descriptor_data());
            messages.push(CloseStream::generated_message_descriptor_data());
            messages.push(WriteData::generated_message_descriptor_data());
            messages.push(QosFragment::generated_message_descriptor_data());
            messages.push(Hash32::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(sync_message::Type::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
