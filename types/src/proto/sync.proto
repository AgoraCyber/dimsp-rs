syntax = "proto3";

// Sync protocol root message
message SyncMessage {
    enum Type {
        OpenWriteStream = 0;
        OpenWriteStreamAck = 1;
        CloseWriteStream = 2;
        CloseWriteStreamAck = 3;
        WriteFragment = 4;
        WriteFragmentAck = 5;
        OpenInbox = 6;
        OpenInboxAck = 7;
        OpenNextInboxStream = 8;
        OpenNextInboxStreamAck = 9;
        ReadFragment = 10;
        ReadFragmentAck = 11;
    }

    oneof content {
        OpenWriteStream open_write_stream = 1;
        OpenWriteStreamAck open_write_stream_ack = 2;
        CloseWriteStream close_write_stream = 3;
        CloseWriteStreamAck close_write_stream_ack = 4;
        WriteFragment write_fragment = 5;
        WriteFragmentAck write_fragment_ack = 6;
        Inbox inbox = 7;
        OpenNextInboxStreamAck open_next_inbox_stream_ack = 8;
        ReadFragment read_fragment = 9;
        ReadFragmentAck read_fragment_ack = 10;
    }
}

message OpenNextInboxStreamAck {
    enum Type {
        Accept = 0;
        /// No more inbox stream.
        Noneed = 2;
    }

    message ReadStream {
        uint64 length = 1;

        uint64 stream_handle = 2;

        repeated Hash32 fragment_hashes = 3;
    }

    /// To match [`OpenWriteStream`] message.
    uint64 id = 1;
    /// ack type.
    Type ack_type = 2;
    
    oneof content {
        /// Opened stream handle.
        ReadStream read_stream = 3;
        /// When reject.
        SyncError sync_error = 4;
    }

    
}

/// Sync data fragment.
message ReadFragment {
    uint64 stream_handle = 1;
    /// fragment offset in the stream.
    uint64 offset = 2;
}

/// Sync data fragment.
message ReadFragmentAck {
    enum Type {
        Accept = 0;
        Reject = 1;
    }

    message Fragment {
            /// Fragment really length.
            uint64 length = 1;
            /// Fragment content data.
            bytes content = 2;
    }
    /// Ack type.
    Type ack_type = 1;
    /// Stream handle that this fragment belong to
    uint64 stream_handle = 2;
    /// fragment offset in the stream.
    uint64 offset = 3;
    /// Reject error information
    oneof content {
        SyncError sync_error = 4;

        Fragment fragment = 5;
    }
    
    
}

/// Try open write stream to target account inbox.
message OpenWriteStream {
    /// To match result message.
    uint64 id = 1;
    /// Total stream length.
    uint64 length = 2;
    /// Write stream [`to`] account's inbox.
    uint64 to = 3;
    /// Offset to start writing data. 
    uint64 offset = 4;
    /// content fragment hashes, a fragment's maximum length is up to 4M bytes.
    repeated Hash32 fragment_hashes = 5;
    /// If `length` < 4M, this field must content the whole stream data.
    WriteFragment inline_stream = 6;
}

/// Ack to OpenWriteStream
message OpenWriteStreamAck {
    enum Type {
        Accept = 0;
        Reject = 1;
        /// When data already saved or just need sync stream metadata.
        Noneed = 2;
    }
    /// To match [`OpenWriteStream`] message.
    uint64 id = 1;
    /// ack type.
    Type ack_type = 2;
    
    oneof content {
        /// Opened stream handle.
        uint64 stream_handle = 3;
        /// When reject.
        SyncError sync_error = 4;
    }
}

message CloseWriteStream {
     uint64 id = 1;
     uint64 stream_handle = 2;
}

message CloseWriteStreamAck {
    /// CloseWriteStream id.
    uint64 id = 1;
    /// May error
    SyncError sync_error = 2;
}

/// Syc protocol errors.
enum SyncError {
    /// The account storage quota is not enough to store whole stream.
    Resource = 0;
}

// 32 bytes hash message
message Hash32 {
    uint64 h1 = 1;   
    uint64 h2 = 2;
    uint64 h3 = 3;
    uint64 h4 = 4;
}

/// Sync data fragment.
message WriteFragment {
    uint64 stream_handle = 1;
    /// fragment offset in the stream.
    uint64 offset = 2;
    /// Fragment really length.
    uint64 length = 3;
    /// Fragment content data.
    bytes content = 4;
}

/// Sync data fragment.
message WriteFragmentAck {
    enum Type {
        Continue = 0;
        Break = 1;
    }
    /// Ack type.
    Type ack_type = 1;
    /// Stream handle that this fragment belong to
    uint64 stream_handle = 2;
    /// fragment offset in the stream.
    uint64 offset = 3;
    /// Break error information
    SyncError sync_error = 4;
}

message Inbox {
    /// Unread message count.
    uint64 unread = 1;
    /// Total message size in bytes
    uint64 total_length = 2;
}