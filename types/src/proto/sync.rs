// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sync.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SyncMessage)
pub struct SyncMessage {
    // message oneof groups
    pub content: ::std::option::Option<sync_message::Content>,
    // special fields
    // @@protoc_insertion_point(special_field:SyncMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SyncMessage {
    fn default() -> &'a SyncMessage {
        <SyncMessage as ::protobuf::Message>::default_instance()
    }
}

impl SyncMessage {
    pub fn new() -> SyncMessage {
        ::std::default::Default::default()
    }

    // .OpenWriteStream open_write_stream = 1;

    pub fn open_write_stream(&self) -> &OpenWriteStream {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::OpenWriteStream(ref v)) => v,
            _ => <OpenWriteStream as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_open_write_stream(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_open_write_stream(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::OpenWriteStream(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_open_write_stream(&mut self, v: OpenWriteStream) {
        self.content = ::std::option::Option::Some(sync_message::Content::OpenWriteStream(v))
    }

    // Mutable pointer to the field.
    pub fn mut_open_write_stream(&mut self) -> &mut OpenWriteStream {
        if let ::std::option::Option::Some(sync_message::Content::OpenWriteStream(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::OpenWriteStream(OpenWriteStream::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::OpenWriteStream(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_open_write_stream(&mut self) -> OpenWriteStream {
        if self.has_open_write_stream() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::OpenWriteStream(v)) => v,
                _ => panic!(),
            }
        } else {
            OpenWriteStream::new()
        }
    }

    // .OpenWriteStreamAck open_write_stream_ack = 2;

    pub fn open_write_stream_ack(&self) -> &OpenWriteStreamAck {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::OpenWriteStreamAck(ref v)) => v,
            _ => <OpenWriteStreamAck as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_open_write_stream_ack(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_open_write_stream_ack(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::OpenWriteStreamAck(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_open_write_stream_ack(&mut self, v: OpenWriteStreamAck) {
        self.content = ::std::option::Option::Some(sync_message::Content::OpenWriteStreamAck(v))
    }

    // Mutable pointer to the field.
    pub fn mut_open_write_stream_ack(&mut self) -> &mut OpenWriteStreamAck {
        if let ::std::option::Option::Some(sync_message::Content::OpenWriteStreamAck(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::OpenWriteStreamAck(OpenWriteStreamAck::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::OpenWriteStreamAck(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_open_write_stream_ack(&mut self) -> OpenWriteStreamAck {
        if self.has_open_write_stream_ack() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::OpenWriteStreamAck(v)) => v,
                _ => panic!(),
            }
        } else {
            OpenWriteStreamAck::new()
        }
    }

    // .CloseWriteStream close_write_stream = 3;

    pub fn close_write_stream(&self) -> &CloseWriteStream {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::CloseWriteStream(ref v)) => v,
            _ => <CloseWriteStream as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_close_write_stream(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_close_write_stream(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::CloseWriteStream(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_close_write_stream(&mut self, v: CloseWriteStream) {
        self.content = ::std::option::Option::Some(sync_message::Content::CloseWriteStream(v))
    }

    // Mutable pointer to the field.
    pub fn mut_close_write_stream(&mut self) -> &mut CloseWriteStream {
        if let ::std::option::Option::Some(sync_message::Content::CloseWriteStream(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::CloseWriteStream(CloseWriteStream::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::CloseWriteStream(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_close_write_stream(&mut self) -> CloseWriteStream {
        if self.has_close_write_stream() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::CloseWriteStream(v)) => v,
                _ => panic!(),
            }
        } else {
            CloseWriteStream::new()
        }
    }

    // .CloseWriteStreamAck close_write_stream_ack = 4;

    pub fn close_write_stream_ack(&self) -> &CloseWriteStreamAck {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::CloseWriteStreamAck(ref v)) => v,
            _ => <CloseWriteStreamAck as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_close_write_stream_ack(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_close_write_stream_ack(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::CloseWriteStreamAck(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_close_write_stream_ack(&mut self, v: CloseWriteStreamAck) {
        self.content = ::std::option::Option::Some(sync_message::Content::CloseWriteStreamAck(v))
    }

    // Mutable pointer to the field.
    pub fn mut_close_write_stream_ack(&mut self) -> &mut CloseWriteStreamAck {
        if let ::std::option::Option::Some(sync_message::Content::CloseWriteStreamAck(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::CloseWriteStreamAck(CloseWriteStreamAck::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::CloseWriteStreamAck(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_close_write_stream_ack(&mut self) -> CloseWriteStreamAck {
        if self.has_close_write_stream_ack() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::CloseWriteStreamAck(v)) => v,
                _ => panic!(),
            }
        } else {
            CloseWriteStreamAck::new()
        }
    }

    // .WriteFragment write_fragment = 5;

    pub fn write_fragment(&self) -> &WriteFragment {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::WriteFragment(ref v)) => v,
            _ => <WriteFragment as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_write_fragment(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_write_fragment(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::WriteFragment(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_write_fragment(&mut self, v: WriteFragment) {
        self.content = ::std::option::Option::Some(sync_message::Content::WriteFragment(v))
    }

    // Mutable pointer to the field.
    pub fn mut_write_fragment(&mut self) -> &mut WriteFragment {
        if let ::std::option::Option::Some(sync_message::Content::WriteFragment(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::WriteFragment(WriteFragment::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::WriteFragment(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_write_fragment(&mut self) -> WriteFragment {
        if self.has_write_fragment() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::WriteFragment(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteFragment::new()
        }
    }

    // .WriteFragmentAck write_fragment_ack = 6;

    pub fn write_fragment_ack(&self) -> &WriteFragmentAck {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::WriteFragmentAck(ref v)) => v,
            _ => <WriteFragmentAck as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_write_fragment_ack(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_write_fragment_ack(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::WriteFragmentAck(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_write_fragment_ack(&mut self, v: WriteFragmentAck) {
        self.content = ::std::option::Option::Some(sync_message::Content::WriteFragmentAck(v))
    }

    // Mutable pointer to the field.
    pub fn mut_write_fragment_ack(&mut self) -> &mut WriteFragmentAck {
        if let ::std::option::Option::Some(sync_message::Content::WriteFragmentAck(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::WriteFragmentAck(WriteFragmentAck::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::WriteFragmentAck(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_write_fragment_ack(&mut self) -> WriteFragmentAck {
        if self.has_write_fragment_ack() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::WriteFragmentAck(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteFragmentAck::new()
        }
    }

    // .Inbox inbox = 7;

    pub fn inbox(&self) -> &Inbox {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::Inbox(ref v)) => v,
            _ => <Inbox as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_inbox(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_inbox(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::Inbox(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_inbox(&mut self, v: Inbox) {
        self.content = ::std::option::Option::Some(sync_message::Content::Inbox(v))
    }

    // Mutable pointer to the field.
    pub fn mut_inbox(&mut self) -> &mut Inbox {
        if let ::std::option::Option::Some(sync_message::Content::Inbox(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::Inbox(Inbox::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::Inbox(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_inbox(&mut self) -> Inbox {
        if self.has_inbox() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::Inbox(v)) => v,
                _ => panic!(),
            }
        } else {
            Inbox::new()
        }
    }

    // .OpenNextInboxStreamAck open_next_inbox_stream_ack = 8;

    pub fn open_next_inbox_stream_ack(&self) -> &OpenNextInboxStreamAck {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::OpenNextInboxStreamAck(ref v)) => v,
            _ => <OpenNextInboxStreamAck as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_open_next_inbox_stream_ack(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_open_next_inbox_stream_ack(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::OpenNextInboxStreamAck(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_open_next_inbox_stream_ack(&mut self, v: OpenNextInboxStreamAck) {
        self.content = ::std::option::Option::Some(sync_message::Content::OpenNextInboxStreamAck(v))
    }

    // Mutable pointer to the field.
    pub fn mut_open_next_inbox_stream_ack(&mut self) -> &mut OpenNextInboxStreamAck {
        if let ::std::option::Option::Some(sync_message::Content::OpenNextInboxStreamAck(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::OpenNextInboxStreamAck(OpenNextInboxStreamAck::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::OpenNextInboxStreamAck(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_open_next_inbox_stream_ack(&mut self) -> OpenNextInboxStreamAck {
        if self.has_open_next_inbox_stream_ack() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::OpenNextInboxStreamAck(v)) => v,
                _ => panic!(),
            }
        } else {
            OpenNextInboxStreamAck::new()
        }
    }

    // .ReadFragment read_fragment = 9;

    pub fn read_fragment(&self) -> &ReadFragment {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::ReadFragment(ref v)) => v,
            _ => <ReadFragment as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_read_fragment(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_read_fragment(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::ReadFragment(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_read_fragment(&mut self, v: ReadFragment) {
        self.content = ::std::option::Option::Some(sync_message::Content::ReadFragment(v))
    }

    // Mutable pointer to the field.
    pub fn mut_read_fragment(&mut self) -> &mut ReadFragment {
        if let ::std::option::Option::Some(sync_message::Content::ReadFragment(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::ReadFragment(ReadFragment::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::ReadFragment(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_read_fragment(&mut self) -> ReadFragment {
        if self.has_read_fragment() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::ReadFragment(v)) => v,
                _ => panic!(),
            }
        } else {
            ReadFragment::new()
        }
    }

    // .ReadFragmentAck read_fragment_ack = 10;

    pub fn read_fragment_ack(&self) -> &ReadFragmentAck {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::ReadFragmentAck(ref v)) => v,
            _ => <ReadFragmentAck as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_read_fragment_ack(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_read_fragment_ack(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(sync_message::Content::ReadFragmentAck(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_read_fragment_ack(&mut self, v: ReadFragmentAck) {
        self.content = ::std::option::Option::Some(sync_message::Content::ReadFragmentAck(v))
    }

    // Mutable pointer to the field.
    pub fn mut_read_fragment_ack(&mut self) -> &mut ReadFragmentAck {
        if let ::std::option::Option::Some(sync_message::Content::ReadFragmentAck(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(sync_message::Content::ReadFragmentAck(ReadFragmentAck::new()));
        }
        match self.content {
            ::std::option::Option::Some(sync_message::Content::ReadFragmentAck(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_read_fragment_ack(&mut self) -> ReadFragmentAck {
        if self.has_read_fragment_ack() {
            match self.content.take() {
                ::std::option::Option::Some(sync_message::Content::ReadFragmentAck(v)) => v,
                _ => panic!(),
            }
        } else {
            ReadFragmentAck::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, OpenWriteStream>(
            "open_write_stream",
            SyncMessage::has_open_write_stream,
            SyncMessage::open_write_stream,
            SyncMessage::mut_open_write_stream,
            SyncMessage::set_open_write_stream,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, OpenWriteStreamAck>(
            "open_write_stream_ack",
            SyncMessage::has_open_write_stream_ack,
            SyncMessage::open_write_stream_ack,
            SyncMessage::mut_open_write_stream_ack,
            SyncMessage::set_open_write_stream_ack,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CloseWriteStream>(
            "close_write_stream",
            SyncMessage::has_close_write_stream,
            SyncMessage::close_write_stream,
            SyncMessage::mut_close_write_stream,
            SyncMessage::set_close_write_stream,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CloseWriteStreamAck>(
            "close_write_stream_ack",
            SyncMessage::has_close_write_stream_ack,
            SyncMessage::close_write_stream_ack,
            SyncMessage::mut_close_write_stream_ack,
            SyncMessage::set_close_write_stream_ack,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, WriteFragment>(
            "write_fragment",
            SyncMessage::has_write_fragment,
            SyncMessage::write_fragment,
            SyncMessage::mut_write_fragment,
            SyncMessage::set_write_fragment,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, WriteFragmentAck>(
            "write_fragment_ack",
            SyncMessage::has_write_fragment_ack,
            SyncMessage::write_fragment_ack,
            SyncMessage::mut_write_fragment_ack,
            SyncMessage::set_write_fragment_ack,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Inbox>(
            "inbox",
            SyncMessage::has_inbox,
            SyncMessage::inbox,
            SyncMessage::mut_inbox,
            SyncMessage::set_inbox,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, OpenNextInboxStreamAck>(
            "open_next_inbox_stream_ack",
            SyncMessage::has_open_next_inbox_stream_ack,
            SyncMessage::open_next_inbox_stream_ack,
            SyncMessage::mut_open_next_inbox_stream_ack,
            SyncMessage::set_open_next_inbox_stream_ack,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ReadFragment>(
            "read_fragment",
            SyncMessage::has_read_fragment,
            SyncMessage::read_fragment,
            SyncMessage::mut_read_fragment,
            SyncMessage::set_read_fragment,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ReadFragmentAck>(
            "read_fragment_ack",
            SyncMessage::has_read_fragment_ack,
            SyncMessage::read_fragment_ack,
            SyncMessage::mut_read_fragment_ack,
            SyncMessage::set_read_fragment_ack,
        ));
        oneofs.push(sync_message::Content::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SyncMessage>(
            "SyncMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SyncMessage {
    const NAME: &'static str = "SyncMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::OpenWriteStream(is.read_message()?));
                },
                18 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::OpenWriteStreamAck(is.read_message()?));
                },
                26 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::CloseWriteStream(is.read_message()?));
                },
                34 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::CloseWriteStreamAck(is.read_message()?));
                },
                42 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::WriteFragment(is.read_message()?));
                },
                50 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::WriteFragmentAck(is.read_message()?));
                },
                58 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::Inbox(is.read_message()?));
                },
                66 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::OpenNextInboxStreamAck(is.read_message()?));
                },
                74 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::ReadFragment(is.read_message()?));
                },
                82 => {
                    self.content = ::std::option::Option::Some(sync_message::Content::ReadFragmentAck(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &sync_message::Content::OpenWriteStream(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_message::Content::OpenWriteStreamAck(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_message::Content::CloseWriteStream(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_message::Content::CloseWriteStreamAck(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_message::Content::WriteFragment(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_message::Content::WriteFragmentAck(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_message::Content::Inbox(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_message::Content::OpenNextInboxStreamAck(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_message::Content::ReadFragment(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_message::Content::ReadFragmentAck(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &sync_message::Content::OpenWriteStream(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &sync_message::Content::OpenWriteStreamAck(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &sync_message::Content::CloseWriteStream(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &sync_message::Content::CloseWriteStreamAck(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &sync_message::Content::WriteFragment(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &sync_message::Content::WriteFragmentAck(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &sync_message::Content::Inbox(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &sync_message::Content::OpenNextInboxStreamAck(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &sync_message::Content::ReadFragment(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &sync_message::Content::ReadFragmentAck(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SyncMessage {
        SyncMessage::new()
    }

    fn clear(&mut self) {
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SyncMessage {
        static instance: SyncMessage = SyncMessage {
            content: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SyncMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SyncMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SyncMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SyncMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SyncMessage`
pub mod sync_message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:SyncMessage.content)
    pub enum Content {
        // @@protoc_insertion_point(oneof_field:SyncMessage.open_write_stream)
        OpenWriteStream(super::OpenWriteStream),
        // @@protoc_insertion_point(oneof_field:SyncMessage.open_write_stream_ack)
        OpenWriteStreamAck(super::OpenWriteStreamAck),
        // @@protoc_insertion_point(oneof_field:SyncMessage.close_write_stream)
        CloseWriteStream(super::CloseWriteStream),
        // @@protoc_insertion_point(oneof_field:SyncMessage.close_write_stream_ack)
        CloseWriteStreamAck(super::CloseWriteStreamAck),
        // @@protoc_insertion_point(oneof_field:SyncMessage.write_fragment)
        WriteFragment(super::WriteFragment),
        // @@protoc_insertion_point(oneof_field:SyncMessage.write_fragment_ack)
        WriteFragmentAck(super::WriteFragmentAck),
        // @@protoc_insertion_point(oneof_field:SyncMessage.inbox)
        Inbox(super::Inbox),
        // @@protoc_insertion_point(oneof_field:SyncMessage.open_next_inbox_stream_ack)
        OpenNextInboxStreamAck(super::OpenNextInboxStreamAck),
        // @@protoc_insertion_point(oneof_field:SyncMessage.read_fragment)
        ReadFragment(super::ReadFragment),
        // @@protoc_insertion_point(oneof_field:SyncMessage.read_fragment_ack)
        ReadFragmentAck(super::ReadFragmentAck),
    }

    impl ::protobuf::Oneof for Content {
    }

    impl ::protobuf::OneofFull for Content {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::SyncMessage as ::protobuf::MessageFull>::descriptor().oneof_by_name("content").unwrap()).clone()
        }
    }

    impl Content {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Content>("content")
        }
    }
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:SyncMessage.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.OpenWriteStream)
        OpenWriteStream = 0,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.OpenWriteStreamAck)
        OpenWriteStreamAck = 1,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.CloseWriteStream)
        CloseWriteStream = 2,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.CloseWriteStreamAck)
        CloseWriteStreamAck = 3,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.WriteFragment)
        WriteFragment = 4,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.WriteFragmentAck)
        WriteFragmentAck = 5,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.OpenInbox)
        OpenInbox = 6,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.OpenInboxAck)
        OpenInboxAck = 7,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.OpenNextInboxStream)
        OpenNextInboxStream = 8,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.OpenNextInboxStreamAck)
        OpenNextInboxStreamAck = 9,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.ReadFragment)
        ReadFragment = 10,
        // @@protoc_insertion_point(enum_value:SyncMessage.Type.ReadFragmentAck)
        ReadFragmentAck = 11,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::OpenWriteStream),
                1 => ::std::option::Option::Some(Type::OpenWriteStreamAck),
                2 => ::std::option::Option::Some(Type::CloseWriteStream),
                3 => ::std::option::Option::Some(Type::CloseWriteStreamAck),
                4 => ::std::option::Option::Some(Type::WriteFragment),
                5 => ::std::option::Option::Some(Type::WriteFragmentAck),
                6 => ::std::option::Option::Some(Type::OpenInbox),
                7 => ::std::option::Option::Some(Type::OpenInboxAck),
                8 => ::std::option::Option::Some(Type::OpenNextInboxStream),
                9 => ::std::option::Option::Some(Type::OpenNextInboxStreamAck),
                10 => ::std::option::Option::Some(Type::ReadFragment),
                11 => ::std::option::Option::Some(Type::ReadFragmentAck),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::OpenWriteStream,
            Type::OpenWriteStreamAck,
            Type::CloseWriteStream,
            Type::CloseWriteStreamAck,
            Type::WriteFragment,
            Type::WriteFragmentAck,
            Type::OpenInbox,
            Type::OpenInboxAck,
            Type::OpenNextInboxStream,
            Type::OpenNextInboxStreamAck,
            Type::ReadFragment,
            Type::ReadFragmentAck,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("SyncMessage.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::OpenWriteStream
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("SyncMessage.Type")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OpenNextInboxStreamAck)
pub struct OpenNextInboxStreamAck {
    // message fields
    // @@protoc_insertion_point(field:OpenNextInboxStreamAck.id)
    pub id: u64,
    // @@protoc_insertion_point(field:OpenNextInboxStreamAck.ack_type)
    pub ack_type: ::protobuf::EnumOrUnknown<open_next_inbox_stream_ack::Type>,
    // message oneof groups
    pub content: ::std::option::Option<open_next_inbox_stream_ack::Content>,
    // special fields
    // @@protoc_insertion_point(special_field:OpenNextInboxStreamAck.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OpenNextInboxStreamAck {
    fn default() -> &'a OpenNextInboxStreamAck {
        <OpenNextInboxStreamAck as ::protobuf::Message>::default_instance()
    }
}

impl OpenNextInboxStreamAck {
    pub fn new() -> OpenNextInboxStreamAck {
        ::std::default::Default::default()
    }

    // .OpenNextInboxStreamAck.ReadStream read_stream = 3;

    pub fn read_stream(&self) -> &open_next_inbox_stream_ack::ReadStream {
        match self.content {
            ::std::option::Option::Some(open_next_inbox_stream_ack::Content::ReadStream(ref v)) => v,
            _ => <open_next_inbox_stream_ack::ReadStream as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_read_stream(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_read_stream(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(open_next_inbox_stream_ack::Content::ReadStream(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_read_stream(&mut self, v: open_next_inbox_stream_ack::ReadStream) {
        self.content = ::std::option::Option::Some(open_next_inbox_stream_ack::Content::ReadStream(v))
    }

    // Mutable pointer to the field.
    pub fn mut_read_stream(&mut self) -> &mut open_next_inbox_stream_ack::ReadStream {
        if let ::std::option::Option::Some(open_next_inbox_stream_ack::Content::ReadStream(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(open_next_inbox_stream_ack::Content::ReadStream(open_next_inbox_stream_ack::ReadStream::new()));
        }
        match self.content {
            ::std::option::Option::Some(open_next_inbox_stream_ack::Content::ReadStream(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_read_stream(&mut self) -> open_next_inbox_stream_ack::ReadStream {
        if self.has_read_stream() {
            match self.content.take() {
                ::std::option::Option::Some(open_next_inbox_stream_ack::Content::ReadStream(v)) => v,
                _ => panic!(),
            }
        } else {
            open_next_inbox_stream_ack::ReadStream::new()
        }
    }

    // .SyncError sync_error = 4;

    pub fn sync_error(&self) -> SyncError {
        match self.content {
            ::std::option::Option::Some(open_next_inbox_stream_ack::Content::SyncError(v)) => ::protobuf::EnumOrUnknown::enum_value_or_default(&v),
            _ => SyncError::Resource,
        }
    }

    pub fn clear_sync_error(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_sync_error(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(open_next_inbox_stream_ack::Content::SyncError(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sync_error(&mut self, v: SyncError) {
        self.content = ::std::option::Option::Some(open_next_inbox_stream_ack::Content::SyncError(::protobuf::EnumOrUnknown::new(v)))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &OpenNextInboxStreamAck| { &m.id },
            |m: &mut OpenNextInboxStreamAck| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ack_type",
            |m: &OpenNextInboxStreamAck| { &m.ack_type },
            |m: &mut OpenNextInboxStreamAck| { &mut m.ack_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, open_next_inbox_stream_ack::ReadStream>(
            "read_stream",
            OpenNextInboxStreamAck::has_read_stream,
            OpenNextInboxStreamAck::read_stream,
            OpenNextInboxStreamAck::mut_read_stream,
            OpenNextInboxStreamAck::set_read_stream,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_enum_accessors::<_, _>(
            "sync_error",
            |message: &OpenNextInboxStreamAck| match &message.content {
                ::std::option::Option::Some(open_next_inbox_stream_ack::Content::SyncError(e)) => ::std::option::Option::Some(*e),
                _ => ::std::option::Option::None,
            },
            |message: &mut OpenNextInboxStreamAck, e: ::protobuf::EnumOrUnknown<SyncError>| {
                message.content = ::std::option::Option::Some(open_next_inbox_stream_ack::Content::SyncError(e));
            },
            SyncError::Resource,
        ));
        oneofs.push(open_next_inbox_stream_ack::Content::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OpenNextInboxStreamAck>(
            "OpenNextInboxStreamAck",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OpenNextInboxStreamAck {
    const NAME: &'static str = "OpenNextInboxStreamAck";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                16 => {
                    self.ack_type = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.content = ::std::option::Option::Some(open_next_inbox_stream_ack::Content::ReadStream(is.read_message()?));
                },
                32 => {
                    self.content = ::std::option::Option::Some(open_next_inbox_stream_ack::Content::SyncError(is.read_enum_or_unknown()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if self.ack_type != ::protobuf::EnumOrUnknown::new(open_next_inbox_stream_ack::Type::Accept) {
            my_size += ::protobuf::rt::int32_size(2, self.ack_type.value());
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &open_next_inbox_stream_ack::Content::ReadStream(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &open_next_inbox_stream_ack::Content::SyncError(v) => {
                    my_size += ::protobuf::rt::int32_size(4, v.value());
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.ack_type != ::protobuf::EnumOrUnknown::new(open_next_inbox_stream_ack::Type::Accept) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.ack_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &open_next_inbox_stream_ack::Content::ReadStream(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &open_next_inbox_stream_ack::Content::SyncError(v) => {
                    os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OpenNextInboxStreamAck {
        OpenNextInboxStreamAck::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.ack_type = ::protobuf::EnumOrUnknown::new(open_next_inbox_stream_ack::Type::Accept);
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OpenNextInboxStreamAck {
        static instance: OpenNextInboxStreamAck = OpenNextInboxStreamAck {
            id: 0,
            ack_type: ::protobuf::EnumOrUnknown::from_i32(0),
            content: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OpenNextInboxStreamAck {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OpenNextInboxStreamAck").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OpenNextInboxStreamAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OpenNextInboxStreamAck {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OpenNextInboxStreamAck`
pub mod open_next_inbox_stream_ack {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:OpenNextInboxStreamAck.content)
    pub enum Content {
        // @@protoc_insertion_point(oneof_field:OpenNextInboxStreamAck.read_stream)
        ReadStream(ReadStream),
        // @@protoc_insertion_point(oneof_field:OpenNextInboxStreamAck.sync_error)
        SyncError(::protobuf::EnumOrUnknown<super::SyncError>),
    }

    impl ::protobuf::Oneof for Content {
    }

    impl ::protobuf::OneofFull for Content {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::OpenNextInboxStreamAck as ::protobuf::MessageFull>::descriptor().oneof_by_name("content").unwrap()).clone()
        }
    }

    impl Content {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Content>("content")
        }
    }
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:OpenNextInboxStreamAck.ReadStream)
    pub struct ReadStream {
        // message fields
        // @@protoc_insertion_point(field:OpenNextInboxStreamAck.ReadStream.length)
        pub length: u64,
        // @@protoc_insertion_point(field:OpenNextInboxStreamAck.ReadStream.stream_handle)
        pub stream_handle: u64,
        // @@protoc_insertion_point(field:OpenNextInboxStreamAck.ReadStream.fragment_hashes)
        pub fragment_hashes: ::std::vec::Vec<super::Hash32>,
        // special fields
        // @@protoc_insertion_point(special_field:OpenNextInboxStreamAck.ReadStream.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ReadStream {
        fn default() -> &'a ReadStream {
            <ReadStream as ::protobuf::Message>::default_instance()
        }
    }

    impl ReadStream {
        pub fn new() -> ReadStream {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "length",
                |m: &ReadStream| { &m.length },
                |m: &mut ReadStream| { &mut m.length },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "stream_handle",
                |m: &ReadStream| { &m.stream_handle },
                |m: &mut ReadStream| { &mut m.stream_handle },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "fragment_hashes",
                |m: &ReadStream| { &m.fragment_hashes },
                |m: &mut ReadStream| { &mut m.fragment_hashes },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadStream>(
                "OpenNextInboxStreamAck.ReadStream",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ReadStream {
        const NAME: &'static str = "ReadStream";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.length = is.read_uint64()?;
                    },
                    16 => {
                        self.stream_handle = is.read_uint64()?;
                    },
                    26 => {
                        self.fragment_hashes.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.length != 0 {
                my_size += ::protobuf::rt::uint64_size(1, self.length);
            }
            if self.stream_handle != 0 {
                my_size += ::protobuf::rt::uint64_size(2, self.stream_handle);
            }
            for value in &self.fragment_hashes {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.length != 0 {
                os.write_uint64(1, self.length)?;
            }
            if self.stream_handle != 0 {
                os.write_uint64(2, self.stream_handle)?;
            }
            for v in &self.fragment_hashes {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ReadStream {
            ReadStream::new()
        }

        fn clear(&mut self) {
            self.length = 0;
            self.stream_handle = 0;
            self.fragment_hashes.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ReadStream {
            static instance: ReadStream = ReadStream {
                length: 0,
                stream_handle: 0,
                fragment_hashes: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ReadStream {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("OpenNextInboxStreamAck.ReadStream").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ReadStream {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ReadStream {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:OpenNextInboxStreamAck.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:OpenNextInboxStreamAck.Type.Accept)
        Accept = 0,
        // @@protoc_insertion_point(enum_value:OpenNextInboxStreamAck.Type.Noneed)
        Noneed = 2,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::Accept),
                2 => ::std::option::Option::Some(Type::Noneed),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::Accept,
            Type::Noneed,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("OpenNextInboxStreamAck.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Type::Accept => 0,
                Type::Noneed => 1,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::Accept
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("OpenNextInboxStreamAck.Type")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ReadFragment)
pub struct ReadFragment {
    // message fields
    // @@protoc_insertion_point(field:ReadFragment.stream_handle)
    pub stream_handle: u64,
    // @@protoc_insertion_point(field:ReadFragment.offset)
    pub offset: u64,
    // special fields
    // @@protoc_insertion_point(special_field:ReadFragment.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadFragment {
    fn default() -> &'a ReadFragment {
        <ReadFragment as ::protobuf::Message>::default_instance()
    }
}

impl ReadFragment {
    pub fn new() -> ReadFragment {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stream_handle",
            |m: &ReadFragment| { &m.stream_handle },
            |m: &mut ReadFragment| { &mut m.stream_handle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "offset",
            |m: &ReadFragment| { &m.offset },
            |m: &mut ReadFragment| { &mut m.offset },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadFragment>(
            "ReadFragment",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadFragment {
    const NAME: &'static str = "ReadFragment";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.stream_handle = is.read_uint64()?;
                },
                16 => {
                    self.offset = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.stream_handle != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.stream_handle);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.offset);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.stream_handle != 0 {
            os.write_uint64(1, self.stream_handle)?;
        }
        if self.offset != 0 {
            os.write_uint64(2, self.offset)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadFragment {
        ReadFragment::new()
    }

    fn clear(&mut self) {
        self.stream_handle = 0;
        self.offset = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadFragment {
        static instance: ReadFragment = ReadFragment {
            stream_handle: 0,
            offset: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadFragment {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadFragment").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadFragment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadFragment {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ReadFragmentAck)
pub struct ReadFragmentAck {
    // message fields
    // @@protoc_insertion_point(field:ReadFragmentAck.ack_type)
    pub ack_type: ::protobuf::EnumOrUnknown<read_fragment_ack::Type>,
    // @@protoc_insertion_point(field:ReadFragmentAck.stream_handle)
    pub stream_handle: u64,
    // @@protoc_insertion_point(field:ReadFragmentAck.offset)
    pub offset: u64,
    // message oneof groups
    pub content: ::std::option::Option<read_fragment_ack::Content>,
    // special fields
    // @@protoc_insertion_point(special_field:ReadFragmentAck.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadFragmentAck {
    fn default() -> &'a ReadFragmentAck {
        <ReadFragmentAck as ::protobuf::Message>::default_instance()
    }
}

impl ReadFragmentAck {
    pub fn new() -> ReadFragmentAck {
        ::std::default::Default::default()
    }

    // .SyncError sync_error = 4;

    pub fn sync_error(&self) -> SyncError {
        match self.content {
            ::std::option::Option::Some(read_fragment_ack::Content::SyncError(v)) => ::protobuf::EnumOrUnknown::enum_value_or_default(&v),
            _ => SyncError::Resource,
        }
    }

    pub fn clear_sync_error(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_sync_error(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(read_fragment_ack::Content::SyncError(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sync_error(&mut self, v: SyncError) {
        self.content = ::std::option::Option::Some(read_fragment_ack::Content::SyncError(::protobuf::EnumOrUnknown::new(v)))
    }

    // .ReadFragmentAck.Fragment fragment = 5;

    pub fn fragment(&self) -> &read_fragment_ack::Fragment {
        match self.content {
            ::std::option::Option::Some(read_fragment_ack::Content::Fragment(ref v)) => v,
            _ => <read_fragment_ack::Fragment as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fragment(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_fragment(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(read_fragment_ack::Content::Fragment(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fragment(&mut self, v: read_fragment_ack::Fragment) {
        self.content = ::std::option::Option::Some(read_fragment_ack::Content::Fragment(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fragment(&mut self) -> &mut read_fragment_ack::Fragment {
        if let ::std::option::Option::Some(read_fragment_ack::Content::Fragment(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(read_fragment_ack::Content::Fragment(read_fragment_ack::Fragment::new()));
        }
        match self.content {
            ::std::option::Option::Some(read_fragment_ack::Content::Fragment(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fragment(&mut self) -> read_fragment_ack::Fragment {
        if self.has_fragment() {
            match self.content.take() {
                ::std::option::Option::Some(read_fragment_ack::Content::Fragment(v)) => v,
                _ => panic!(),
            }
        } else {
            read_fragment_ack::Fragment::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ack_type",
            |m: &ReadFragmentAck| { &m.ack_type },
            |m: &mut ReadFragmentAck| { &mut m.ack_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stream_handle",
            |m: &ReadFragmentAck| { &m.stream_handle },
            |m: &mut ReadFragmentAck| { &mut m.stream_handle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "offset",
            |m: &ReadFragmentAck| { &m.offset },
            |m: &mut ReadFragmentAck| { &mut m.offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_enum_accessors::<_, _>(
            "sync_error",
            |message: &ReadFragmentAck| match &message.content {
                ::std::option::Option::Some(read_fragment_ack::Content::SyncError(e)) => ::std::option::Option::Some(*e),
                _ => ::std::option::Option::None,
            },
            |message: &mut ReadFragmentAck, e: ::protobuf::EnumOrUnknown<SyncError>| {
                message.content = ::std::option::Option::Some(read_fragment_ack::Content::SyncError(e));
            },
            SyncError::Resource,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, read_fragment_ack::Fragment>(
            "fragment",
            ReadFragmentAck::has_fragment,
            ReadFragmentAck::fragment,
            ReadFragmentAck::mut_fragment,
            ReadFragmentAck::set_fragment,
        ));
        oneofs.push(read_fragment_ack::Content::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadFragmentAck>(
            "ReadFragmentAck",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadFragmentAck {
    const NAME: &'static str = "ReadFragmentAck";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ack_type = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.stream_handle = is.read_uint64()?;
                },
                24 => {
                    self.offset = is.read_uint64()?;
                },
                32 => {
                    self.content = ::std::option::Option::Some(read_fragment_ack::Content::SyncError(is.read_enum_or_unknown()?));
                },
                42 => {
                    self.content = ::std::option::Option::Some(read_fragment_ack::Content::Fragment(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ack_type != ::protobuf::EnumOrUnknown::new(read_fragment_ack::Type::Accept) {
            my_size += ::protobuf::rt::int32_size(1, self.ack_type.value());
        }
        if self.stream_handle != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.stream_handle);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.offset);
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &read_fragment_ack::Content::SyncError(v) => {
                    my_size += ::protobuf::rt::int32_size(4, v.value());
                },
                &read_fragment_ack::Content::Fragment(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ack_type != ::protobuf::EnumOrUnknown::new(read_fragment_ack::Type::Accept) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.ack_type))?;
        }
        if self.stream_handle != 0 {
            os.write_uint64(2, self.stream_handle)?;
        }
        if self.offset != 0 {
            os.write_uint64(3, self.offset)?;
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &read_fragment_ack::Content::SyncError(v) => {
                    os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
                },
                &read_fragment_ack::Content::Fragment(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadFragmentAck {
        ReadFragmentAck::new()
    }

    fn clear(&mut self) {
        self.ack_type = ::protobuf::EnumOrUnknown::new(read_fragment_ack::Type::Accept);
        self.stream_handle = 0;
        self.offset = 0;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadFragmentAck {
        static instance: ReadFragmentAck = ReadFragmentAck {
            ack_type: ::protobuf::EnumOrUnknown::from_i32(0),
            stream_handle: 0,
            offset: 0,
            content: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadFragmentAck {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadFragmentAck").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadFragmentAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadFragmentAck {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ReadFragmentAck`
pub mod read_fragment_ack {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ReadFragmentAck.content)
    pub enum Content {
        // @@protoc_insertion_point(oneof_field:ReadFragmentAck.sync_error)
        SyncError(::protobuf::EnumOrUnknown<super::SyncError>),
        // @@protoc_insertion_point(oneof_field:ReadFragmentAck.fragment)
        Fragment(Fragment),
    }

    impl ::protobuf::Oneof for Content {
    }

    impl ::protobuf::OneofFull for Content {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ReadFragmentAck as ::protobuf::MessageFull>::descriptor().oneof_by_name("content").unwrap()).clone()
        }
    }

    impl Content {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Content>("content")
        }
    }
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:ReadFragmentAck.Fragment)
    pub struct Fragment {
        // message fields
        // @@protoc_insertion_point(field:ReadFragmentAck.Fragment.length)
        pub length: u64,
        // @@protoc_insertion_point(field:ReadFragmentAck.Fragment.content)
        pub content: ::std::vec::Vec<u8>,
        // special fields
        // @@protoc_insertion_point(special_field:ReadFragmentAck.Fragment.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Fragment {
        fn default() -> &'a Fragment {
            <Fragment as ::protobuf::Message>::default_instance()
        }
    }

    impl Fragment {
        pub fn new() -> Fragment {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "length",
                |m: &Fragment| { &m.length },
                |m: &mut Fragment| { &mut m.length },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "content",
                |m: &Fragment| { &m.content },
                |m: &mut Fragment| { &mut m.content },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Fragment>(
                "ReadFragmentAck.Fragment",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Fragment {
        const NAME: &'static str = "Fragment";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.length = is.read_uint64()?;
                    },
                    18 => {
                        self.content = is.read_bytes()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.length != 0 {
                my_size += ::protobuf::rt::uint64_size(1, self.length);
            }
            if !self.content.is_empty() {
                my_size += ::protobuf::rt::bytes_size(2, &self.content);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.length != 0 {
                os.write_uint64(1, self.length)?;
            }
            if !self.content.is_empty() {
                os.write_bytes(2, &self.content)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Fragment {
            Fragment::new()
        }

        fn clear(&mut self) {
            self.length = 0;
            self.content.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Fragment {
            static instance: Fragment = Fragment {
                length: 0,
                content: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Fragment {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ReadFragmentAck.Fragment").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Fragment {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Fragment {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:ReadFragmentAck.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:ReadFragmentAck.Type.Accept)
        Accept = 0,
        // @@protoc_insertion_point(enum_value:ReadFragmentAck.Type.Reject)
        Reject = 1,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::Accept),
                1 => ::std::option::Option::Some(Type::Reject),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::Accept,
            Type::Reject,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ReadFragmentAck.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::Accept
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("ReadFragmentAck.Type")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OpenWriteStream)
pub struct OpenWriteStream {
    // message fields
    // @@protoc_insertion_point(field:OpenWriteStream.id)
    pub id: u64,
    // @@protoc_insertion_point(field:OpenWriteStream.length)
    pub length: u64,
    // @@protoc_insertion_point(field:OpenWriteStream.to)
    pub to: u64,
    // @@protoc_insertion_point(field:OpenWriteStream.offset)
    pub offset: u64,
    // @@protoc_insertion_point(field:OpenWriteStream.fragment_hashes)
    pub fragment_hashes: ::std::vec::Vec<Hash32>,
    // @@protoc_insertion_point(field:OpenWriteStream.inline_stream)
    pub inline_stream: ::protobuf::MessageField<WriteFragment>,
    // special fields
    // @@protoc_insertion_point(special_field:OpenWriteStream.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OpenWriteStream {
    fn default() -> &'a OpenWriteStream {
        <OpenWriteStream as ::protobuf::Message>::default_instance()
    }
}

impl OpenWriteStream {
    pub fn new() -> OpenWriteStream {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &OpenWriteStream| { &m.id },
            |m: &mut OpenWriteStream| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "length",
            |m: &OpenWriteStream| { &m.length },
            |m: &mut OpenWriteStream| { &mut m.length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to",
            |m: &OpenWriteStream| { &m.to },
            |m: &mut OpenWriteStream| { &mut m.to },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "offset",
            |m: &OpenWriteStream| { &m.offset },
            |m: &mut OpenWriteStream| { &mut m.offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fragment_hashes",
            |m: &OpenWriteStream| { &m.fragment_hashes },
            |m: &mut OpenWriteStream| { &mut m.fragment_hashes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, WriteFragment>(
            "inline_stream",
            |m: &OpenWriteStream| { &m.inline_stream },
            |m: &mut OpenWriteStream| { &mut m.inline_stream },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OpenWriteStream>(
            "OpenWriteStream",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OpenWriteStream {
    const NAME: &'static str = "OpenWriteStream";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                16 => {
                    self.length = is.read_uint64()?;
                },
                24 => {
                    self.to = is.read_uint64()?;
                },
                32 => {
                    self.offset = is.read_uint64()?;
                },
                42 => {
                    self.fragment_hashes.push(is.read_message()?);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.inline_stream)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if self.length != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.length);
        }
        if self.to != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.to);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.offset);
        }
        for value in &self.fragment_hashes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.inline_stream.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.length != 0 {
            os.write_uint64(2, self.length)?;
        }
        if self.to != 0 {
            os.write_uint64(3, self.to)?;
        }
        if self.offset != 0 {
            os.write_uint64(4, self.offset)?;
        }
        for v in &self.fragment_hashes {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.inline_stream.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OpenWriteStream {
        OpenWriteStream::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.length = 0;
        self.to = 0;
        self.offset = 0;
        self.fragment_hashes.clear();
        self.inline_stream.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OpenWriteStream {
        static instance: OpenWriteStream = OpenWriteStream {
            id: 0,
            length: 0,
            to: 0,
            offset: 0,
            fragment_hashes: ::std::vec::Vec::new(),
            inline_stream: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OpenWriteStream {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OpenWriteStream").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OpenWriteStream {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OpenWriteStream {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OpenWriteStreamAck)
pub struct OpenWriteStreamAck {
    // message fields
    // @@protoc_insertion_point(field:OpenWriteStreamAck.id)
    pub id: u64,
    // @@protoc_insertion_point(field:OpenWriteStreamAck.ack_type)
    pub ack_type: ::protobuf::EnumOrUnknown<open_write_stream_ack::Type>,
    // message oneof groups
    pub content: ::std::option::Option<open_write_stream_ack::Content>,
    // special fields
    // @@protoc_insertion_point(special_field:OpenWriteStreamAck.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OpenWriteStreamAck {
    fn default() -> &'a OpenWriteStreamAck {
        <OpenWriteStreamAck as ::protobuf::Message>::default_instance()
    }
}

impl OpenWriteStreamAck {
    pub fn new() -> OpenWriteStreamAck {
        ::std::default::Default::default()
    }

    // uint64 stream_handle = 3;

    pub fn stream_handle(&self) -> u64 {
        match self.content {
            ::std::option::Option::Some(open_write_stream_ack::Content::StreamHandle(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_stream_handle(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_stream_handle(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(open_write_stream_ack::Content::StreamHandle(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stream_handle(&mut self, v: u64) {
        self.content = ::std::option::Option::Some(open_write_stream_ack::Content::StreamHandle(v))
    }

    // .SyncError sync_error = 4;

    pub fn sync_error(&self) -> SyncError {
        match self.content {
            ::std::option::Option::Some(open_write_stream_ack::Content::SyncError(v)) => ::protobuf::EnumOrUnknown::enum_value_or_default(&v),
            _ => SyncError::Resource,
        }
    }

    pub fn clear_sync_error(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_sync_error(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(open_write_stream_ack::Content::SyncError(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sync_error(&mut self, v: SyncError) {
        self.content = ::std::option::Option::Some(open_write_stream_ack::Content::SyncError(::protobuf::EnumOrUnknown::new(v)))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &OpenWriteStreamAck| { &m.id },
            |m: &mut OpenWriteStreamAck| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ack_type",
            |m: &OpenWriteStreamAck| { &m.ack_type },
            |m: &mut OpenWriteStreamAck| { &mut m.ack_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "stream_handle",
            OpenWriteStreamAck::has_stream_handle,
            OpenWriteStreamAck::stream_handle,
            OpenWriteStreamAck::set_stream_handle,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_enum_accessors::<_, _>(
            "sync_error",
            |message: &OpenWriteStreamAck| match &message.content {
                ::std::option::Option::Some(open_write_stream_ack::Content::SyncError(e)) => ::std::option::Option::Some(*e),
                _ => ::std::option::Option::None,
            },
            |message: &mut OpenWriteStreamAck, e: ::protobuf::EnumOrUnknown<SyncError>| {
                message.content = ::std::option::Option::Some(open_write_stream_ack::Content::SyncError(e));
            },
            SyncError::Resource,
        ));
        oneofs.push(open_write_stream_ack::Content::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OpenWriteStreamAck>(
            "OpenWriteStreamAck",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OpenWriteStreamAck {
    const NAME: &'static str = "OpenWriteStreamAck";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                16 => {
                    self.ack_type = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.content = ::std::option::Option::Some(open_write_stream_ack::Content::StreamHandle(is.read_uint64()?));
                },
                32 => {
                    self.content = ::std::option::Option::Some(open_write_stream_ack::Content::SyncError(is.read_enum_or_unknown()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if self.ack_type != ::protobuf::EnumOrUnknown::new(open_write_stream_ack::Type::Accept) {
            my_size += ::protobuf::rt::int32_size(2, self.ack_type.value());
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &open_write_stream_ack::Content::StreamHandle(v) => {
                    my_size += ::protobuf::rt::uint64_size(3, v);
                },
                &open_write_stream_ack::Content::SyncError(v) => {
                    my_size += ::protobuf::rt::int32_size(4, v.value());
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.ack_type != ::protobuf::EnumOrUnknown::new(open_write_stream_ack::Type::Accept) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.ack_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &open_write_stream_ack::Content::StreamHandle(v) => {
                    os.write_uint64(3, v)?;
                },
                &open_write_stream_ack::Content::SyncError(v) => {
                    os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OpenWriteStreamAck {
        OpenWriteStreamAck::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.ack_type = ::protobuf::EnumOrUnknown::new(open_write_stream_ack::Type::Accept);
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OpenWriteStreamAck {
        static instance: OpenWriteStreamAck = OpenWriteStreamAck {
            id: 0,
            ack_type: ::protobuf::EnumOrUnknown::from_i32(0),
            content: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OpenWriteStreamAck {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OpenWriteStreamAck").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OpenWriteStreamAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OpenWriteStreamAck {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OpenWriteStreamAck`
pub mod open_write_stream_ack {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:OpenWriteStreamAck.content)
    pub enum Content {
        // @@protoc_insertion_point(oneof_field:OpenWriteStreamAck.stream_handle)
        StreamHandle(u64),
        // @@protoc_insertion_point(oneof_field:OpenWriteStreamAck.sync_error)
        SyncError(::protobuf::EnumOrUnknown<super::SyncError>),
    }

    impl ::protobuf::Oneof for Content {
    }

    impl ::protobuf::OneofFull for Content {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::OpenWriteStreamAck as ::protobuf::MessageFull>::descriptor().oneof_by_name("content").unwrap()).clone()
        }
    }

    impl Content {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Content>("content")
        }
    }
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:OpenWriteStreamAck.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:OpenWriteStreamAck.Type.Accept)
        Accept = 0,
        // @@protoc_insertion_point(enum_value:OpenWriteStreamAck.Type.Reject)
        Reject = 1,
        // @@protoc_insertion_point(enum_value:OpenWriteStreamAck.Type.Noneed)
        Noneed = 2,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::Accept),
                1 => ::std::option::Option::Some(Type::Reject),
                2 => ::std::option::Option::Some(Type::Noneed),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::Accept,
            Type::Reject,
            Type::Noneed,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("OpenWriteStreamAck.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::Accept
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("OpenWriteStreamAck.Type")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CloseWriteStream)
pub struct CloseWriteStream {
    // message fields
    // @@protoc_insertion_point(field:CloseWriteStream.id)
    pub id: u64,
    // @@protoc_insertion_point(field:CloseWriteStream.stream_handle)
    pub stream_handle: u64,
    // special fields
    // @@protoc_insertion_point(special_field:CloseWriteStream.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CloseWriteStream {
    fn default() -> &'a CloseWriteStream {
        <CloseWriteStream as ::protobuf::Message>::default_instance()
    }
}

impl CloseWriteStream {
    pub fn new() -> CloseWriteStream {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &CloseWriteStream| { &m.id },
            |m: &mut CloseWriteStream| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stream_handle",
            |m: &CloseWriteStream| { &m.stream_handle },
            |m: &mut CloseWriteStream| { &mut m.stream_handle },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CloseWriteStream>(
            "CloseWriteStream",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CloseWriteStream {
    const NAME: &'static str = "CloseWriteStream";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                16 => {
                    self.stream_handle = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if self.stream_handle != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.stream_handle);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.stream_handle != 0 {
            os.write_uint64(2, self.stream_handle)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CloseWriteStream {
        CloseWriteStream::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.stream_handle = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CloseWriteStream {
        static instance: CloseWriteStream = CloseWriteStream {
            id: 0,
            stream_handle: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CloseWriteStream {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CloseWriteStream").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CloseWriteStream {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloseWriteStream {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CloseWriteStreamAck)
pub struct CloseWriteStreamAck {
    // message fields
    // @@protoc_insertion_point(field:CloseWriteStreamAck.id)
    pub id: u64,
    // @@protoc_insertion_point(field:CloseWriteStreamAck.sync_error)
    pub sync_error: ::protobuf::EnumOrUnknown<SyncError>,
    // special fields
    // @@protoc_insertion_point(special_field:CloseWriteStreamAck.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CloseWriteStreamAck {
    fn default() -> &'a CloseWriteStreamAck {
        <CloseWriteStreamAck as ::protobuf::Message>::default_instance()
    }
}

impl CloseWriteStreamAck {
    pub fn new() -> CloseWriteStreamAck {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &CloseWriteStreamAck| { &m.id },
            |m: &mut CloseWriteStreamAck| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sync_error",
            |m: &CloseWriteStreamAck| { &m.sync_error },
            |m: &mut CloseWriteStreamAck| { &mut m.sync_error },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CloseWriteStreamAck>(
            "CloseWriteStreamAck",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CloseWriteStreamAck {
    const NAME: &'static str = "CloseWriteStreamAck";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint64()?;
                },
                16 => {
                    self.sync_error = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.id);
        }
        if self.sync_error != ::protobuf::EnumOrUnknown::new(SyncError::Resource) {
            my_size += ::protobuf::rt::int32_size(2, self.sync_error.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.sync_error != ::protobuf::EnumOrUnknown::new(SyncError::Resource) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.sync_error))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CloseWriteStreamAck {
        CloseWriteStreamAck::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.sync_error = ::protobuf::EnumOrUnknown::new(SyncError::Resource);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CloseWriteStreamAck {
        static instance: CloseWriteStreamAck = CloseWriteStreamAck {
            id: 0,
            sync_error: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CloseWriteStreamAck {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CloseWriteStreamAck").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CloseWriteStreamAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloseWriteStreamAck {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Hash32)
pub struct Hash32 {
    // message fields
    // @@protoc_insertion_point(field:Hash32.h1)
    pub h1: u64,
    // @@protoc_insertion_point(field:Hash32.h2)
    pub h2: u64,
    // @@protoc_insertion_point(field:Hash32.h3)
    pub h3: u64,
    // @@protoc_insertion_point(field:Hash32.h4)
    pub h4: u64,
    // special fields
    // @@protoc_insertion_point(special_field:Hash32.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Hash32 {
    fn default() -> &'a Hash32 {
        <Hash32 as ::protobuf::Message>::default_instance()
    }
}

impl Hash32 {
    pub fn new() -> Hash32 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "h1",
            |m: &Hash32| { &m.h1 },
            |m: &mut Hash32| { &mut m.h1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "h2",
            |m: &Hash32| { &m.h2 },
            |m: &mut Hash32| { &mut m.h2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "h3",
            |m: &Hash32| { &m.h3 },
            |m: &mut Hash32| { &mut m.h3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "h4",
            |m: &Hash32| { &m.h4 },
            |m: &mut Hash32| { &mut m.h4 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Hash32>(
            "Hash32",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Hash32 {
    const NAME: &'static str = "Hash32";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.h1 = is.read_uint64()?;
                },
                16 => {
                    self.h2 = is.read_uint64()?;
                },
                24 => {
                    self.h3 = is.read_uint64()?;
                },
                32 => {
                    self.h4 = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.h1 != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.h1);
        }
        if self.h2 != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.h2);
        }
        if self.h3 != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.h3);
        }
        if self.h4 != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.h4);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.h1 != 0 {
            os.write_uint64(1, self.h1)?;
        }
        if self.h2 != 0 {
            os.write_uint64(2, self.h2)?;
        }
        if self.h3 != 0 {
            os.write_uint64(3, self.h3)?;
        }
        if self.h4 != 0 {
            os.write_uint64(4, self.h4)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Hash32 {
        Hash32::new()
    }

    fn clear(&mut self) {
        self.h1 = 0;
        self.h2 = 0;
        self.h3 = 0;
        self.h4 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Hash32 {
        static instance: Hash32 = Hash32 {
            h1: 0,
            h2: 0,
            h3: 0,
            h4: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Hash32 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Hash32").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Hash32 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Hash32 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:WriteFragment)
pub struct WriteFragment {
    // message fields
    // @@protoc_insertion_point(field:WriteFragment.stream_handle)
    pub stream_handle: u64,
    // @@protoc_insertion_point(field:WriteFragment.offset)
    pub offset: u64,
    // @@protoc_insertion_point(field:WriteFragment.length)
    pub length: u64,
    // @@protoc_insertion_point(field:WriteFragment.content)
    pub content: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:WriteFragment.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WriteFragment {
    fn default() -> &'a WriteFragment {
        <WriteFragment as ::protobuf::Message>::default_instance()
    }
}

impl WriteFragment {
    pub fn new() -> WriteFragment {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stream_handle",
            |m: &WriteFragment| { &m.stream_handle },
            |m: &mut WriteFragment| { &mut m.stream_handle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "offset",
            |m: &WriteFragment| { &m.offset },
            |m: &mut WriteFragment| { &mut m.offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "length",
            |m: &WriteFragment| { &m.length },
            |m: &mut WriteFragment| { &mut m.length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content",
            |m: &WriteFragment| { &m.content },
            |m: &mut WriteFragment| { &mut m.content },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WriteFragment>(
            "WriteFragment",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WriteFragment {
    const NAME: &'static str = "WriteFragment";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.stream_handle = is.read_uint64()?;
                },
                16 => {
                    self.offset = is.read_uint64()?;
                },
                24 => {
                    self.length = is.read_uint64()?;
                },
                34 => {
                    self.content = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.stream_handle != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.stream_handle);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.offset);
        }
        if self.length != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.length);
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.content);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.stream_handle != 0 {
            os.write_uint64(1, self.stream_handle)?;
        }
        if self.offset != 0 {
            os.write_uint64(2, self.offset)?;
        }
        if self.length != 0 {
            os.write_uint64(3, self.length)?;
        }
        if !self.content.is_empty() {
            os.write_bytes(4, &self.content)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WriteFragment {
        WriteFragment::new()
    }

    fn clear(&mut self) {
        self.stream_handle = 0;
        self.offset = 0;
        self.length = 0;
        self.content.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WriteFragment {
        static instance: WriteFragment = WriteFragment {
            stream_handle: 0,
            offset: 0,
            length: 0,
            content: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WriteFragment {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WriteFragment").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WriteFragment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteFragment {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:WriteFragmentAck)
pub struct WriteFragmentAck {
    // message fields
    // @@protoc_insertion_point(field:WriteFragmentAck.ack_type)
    pub ack_type: ::protobuf::EnumOrUnknown<write_fragment_ack::Type>,
    // @@protoc_insertion_point(field:WriteFragmentAck.stream_handle)
    pub stream_handle: u64,
    // @@protoc_insertion_point(field:WriteFragmentAck.offset)
    pub offset: u64,
    // @@protoc_insertion_point(field:WriteFragmentAck.sync_error)
    pub sync_error: ::protobuf::EnumOrUnknown<SyncError>,
    // special fields
    // @@protoc_insertion_point(special_field:WriteFragmentAck.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WriteFragmentAck {
    fn default() -> &'a WriteFragmentAck {
        <WriteFragmentAck as ::protobuf::Message>::default_instance()
    }
}

impl WriteFragmentAck {
    pub fn new() -> WriteFragmentAck {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ack_type",
            |m: &WriteFragmentAck| { &m.ack_type },
            |m: &mut WriteFragmentAck| { &mut m.ack_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stream_handle",
            |m: &WriteFragmentAck| { &m.stream_handle },
            |m: &mut WriteFragmentAck| { &mut m.stream_handle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "offset",
            |m: &WriteFragmentAck| { &m.offset },
            |m: &mut WriteFragmentAck| { &mut m.offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sync_error",
            |m: &WriteFragmentAck| { &m.sync_error },
            |m: &mut WriteFragmentAck| { &mut m.sync_error },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WriteFragmentAck>(
            "WriteFragmentAck",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WriteFragmentAck {
    const NAME: &'static str = "WriteFragmentAck";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ack_type = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.stream_handle = is.read_uint64()?;
                },
                24 => {
                    self.offset = is.read_uint64()?;
                },
                32 => {
                    self.sync_error = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ack_type != ::protobuf::EnumOrUnknown::new(write_fragment_ack::Type::Continue) {
            my_size += ::protobuf::rt::int32_size(1, self.ack_type.value());
        }
        if self.stream_handle != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.stream_handle);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.offset);
        }
        if self.sync_error != ::protobuf::EnumOrUnknown::new(SyncError::Resource) {
            my_size += ::protobuf::rt::int32_size(4, self.sync_error.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ack_type != ::protobuf::EnumOrUnknown::new(write_fragment_ack::Type::Continue) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.ack_type))?;
        }
        if self.stream_handle != 0 {
            os.write_uint64(2, self.stream_handle)?;
        }
        if self.offset != 0 {
            os.write_uint64(3, self.offset)?;
        }
        if self.sync_error != ::protobuf::EnumOrUnknown::new(SyncError::Resource) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.sync_error))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WriteFragmentAck {
        WriteFragmentAck::new()
    }

    fn clear(&mut self) {
        self.ack_type = ::protobuf::EnumOrUnknown::new(write_fragment_ack::Type::Continue);
        self.stream_handle = 0;
        self.offset = 0;
        self.sync_error = ::protobuf::EnumOrUnknown::new(SyncError::Resource);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WriteFragmentAck {
        static instance: WriteFragmentAck = WriteFragmentAck {
            ack_type: ::protobuf::EnumOrUnknown::from_i32(0),
            stream_handle: 0,
            offset: 0,
            sync_error: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WriteFragmentAck {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WriteFragmentAck").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WriteFragmentAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteFragmentAck {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `WriteFragmentAck`
pub mod write_fragment_ack {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:WriteFragmentAck.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:WriteFragmentAck.Type.Continue)
        Continue = 0,
        // @@protoc_insertion_point(enum_value:WriteFragmentAck.Type.Break)
        Break = 1,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::Continue),
                1 => ::std::option::Option::Some(Type::Break),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::Continue,
            Type::Break,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("WriteFragmentAck.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::Continue
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("WriteFragmentAck.Type")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Inbox)
pub struct Inbox {
    // message fields
    // @@protoc_insertion_point(field:Inbox.unread)
    pub unread: u64,
    // @@protoc_insertion_point(field:Inbox.total_length)
    pub total_length: u64,
    // special fields
    // @@protoc_insertion_point(special_field:Inbox.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Inbox {
    fn default() -> &'a Inbox {
        <Inbox as ::protobuf::Message>::default_instance()
    }
}

impl Inbox {
    pub fn new() -> Inbox {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unread",
            |m: &Inbox| { &m.unread },
            |m: &mut Inbox| { &mut m.unread },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total_length",
            |m: &Inbox| { &m.total_length },
            |m: &mut Inbox| { &mut m.total_length },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Inbox>(
            "Inbox",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Inbox {
    const NAME: &'static str = "Inbox";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.unread = is.read_uint64()?;
                },
                16 => {
                    self.total_length = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.unread != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.unread);
        }
        if self.total_length != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.total_length);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.unread != 0 {
            os.write_uint64(1, self.unread)?;
        }
        if self.total_length != 0 {
            os.write_uint64(2, self.total_length)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Inbox {
        Inbox::new()
    }

    fn clear(&mut self) {
        self.unread = 0;
        self.total_length = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Inbox {
        static instance: Inbox = Inbox {
            unread: 0,
            total_length: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Inbox {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Inbox").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Inbox {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Inbox {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:SyncError)
pub enum SyncError {
    // @@protoc_insertion_point(enum_value:SyncError.Resource)
    Resource = 0,
}

impl ::protobuf::Enum for SyncError {
    const NAME: &'static str = "SyncError";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SyncError> {
        match value {
            0 => ::std::option::Option::Some(SyncError::Resource),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [SyncError] = &[
        SyncError::Resource,
    ];
}

impl ::protobuf::EnumFull for SyncError {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("SyncError").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for SyncError {
    fn default() -> Self {
        SyncError::Resource
    }
}

impl SyncError {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<SyncError>("SyncError")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nsync.proto\"\xa6\x07\n\x0bSyncMessage\x12>\n\x11open_write_stream\
    \x18\x01\x20\x01(\x0b2\x10.OpenWriteStreamH\0R\x0fopenWriteStream\x12H\n\
    \x15open_write_stream_ack\x18\x02\x20\x01(\x0b2\x13.OpenWriteStreamAckH\
    \0R\x12openWriteStreamAck\x12A\n\x12close_write_stream\x18\x03\x20\x01(\
    \x0b2\x11.CloseWriteStreamH\0R\x10closeWriteStream\x12K\n\x16close_write\
    _stream_ack\x18\x04\x20\x01(\x0b2\x14.CloseWriteStreamAckH\0R\x13closeWr\
    iteStreamAck\x127\n\x0ewrite_fragment\x18\x05\x20\x01(\x0b2\x0e.WriteFra\
    gmentH\0R\rwriteFragment\x12A\n\x12write_fragment_ack\x18\x06\x20\x01(\
    \x0b2\x11.WriteFragmentAckH\0R\x10writeFragmentAck\x12\x1e\n\x05inbox\
    \x18\x07\x20\x01(\x0b2\x06.InboxH\0R\x05inbox\x12U\n\x1aopen_next_inbox_\
    stream_ack\x18\x08\x20\x01(\x0b2\x17.OpenNextInboxStreamAckH\0R\x16openN\
    extInboxStreamAck\x124\n\rread_fragment\x18\t\x20\x01(\x0b2\r.ReadFragme\
    ntH\0R\x0creadFragment\x12>\n\x11read_fragment_ack\x18\n\x20\x01(\x0b2\
    \x10.ReadFragmentAckH\0R\x0freadFragmentAck\"\x88\x02\n\x04Type\x12\x13\
    \n\x0fOpenWriteStream\x10\0\x12\x16\n\x12OpenWriteStreamAck\x10\x01\x12\
    \x14\n\x10CloseWriteStream\x10\x02\x12\x17\n\x13CloseWriteStreamAck\x10\
    \x03\x12\x11\n\rWriteFragment\x10\x04\x12\x14\n\x10WriteFragmentAck\x10\
    \x05\x12\r\n\tOpenInbox\x10\x06\x12\x10\n\x0cOpenInboxAck\x10\x07\x12\
    \x17\n\x13OpenNextInboxStream\x10\x08\x12\x1a\n\x16OpenNextInboxStreamAc\
    k\x10\t\x12\x10\n\x0cReadFragment\x10\n\x12\x13\n\x0fReadFragmentAck\x10\
    \x0bB\t\n\x07content\"\xfd\x02\n\x16OpenNextInboxStreamAck\x12\x0e\n\x02\
    id\x18\x01\x20\x01(\x04R\x02id\x127\n\x08ack_type\x18\x02\x20\x01(\x0e2\
    \x1c.OpenNextInboxStreamAck.TypeR\x07ackType\x12E\n\x0bread_stream\x18\
    \x03\x20\x01(\x0b2\".OpenNextInboxStreamAck.ReadStreamH\0R\nreadStream\
    \x12+\n\nsync_error\x18\x04\x20\x01(\x0e2\n.SyncErrorH\0R\tsyncError\x1a\
    {\n\nReadStream\x12\x16\n\x06length\x18\x01\x20\x01(\x04R\x06length\x12#\
    \n\rstream_handle\x18\x02\x20\x01(\x04R\x0cstreamHandle\x120\n\x0ffragme\
    nt_hashes\x18\x03\x20\x03(\x0b2\x07.Hash32R\x0efragmentHashes\"\x1e\n\
    \x04Type\x12\n\n\x06Accept\x10\0\x12\n\n\x06Noneed\x10\x02B\t\n\x07conte\
    nt\"K\n\x0cReadFragment\x12#\n\rstream_handle\x18\x01\x20\x01(\x04R\x0cs\
    treamHandle\x12\x16\n\x06offset\x18\x02\x20\x01(\x04R\x06offset\"\xcf\
    \x02\n\x0fReadFragmentAck\x120\n\x08ack_type\x18\x01\x20\x01(\x0e2\x15.R\
    eadFragmentAck.TypeR\x07ackType\x12#\n\rstream_handle\x18\x02\x20\x01(\
    \x04R\x0cstreamHandle\x12\x16\n\x06offset\x18\x03\x20\x01(\x04R\x06offse\
    t\x12+\n\nsync_error\x18\x04\x20\x01(\x0e2\n.SyncErrorH\0R\tsyncError\
    \x127\n\x08fragment\x18\x05\x20\x01(\x0b2\x19.ReadFragmentAck.FragmentH\
    \0R\x08fragment\x1a<\n\x08Fragment\x12\x16\n\x06length\x18\x01\x20\x01(\
    \x04R\x06length\x12\x18\n\x07content\x18\x02\x20\x01(\x0cR\x07content\"\
    \x1e\n\x04Type\x12\n\n\x06Accept\x10\0\x12\n\n\x06Reject\x10\x01B\t\n\
    \x07content\"\xc8\x01\n\x0fOpenWriteStream\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\x04R\x02id\x12\x16\n\x06length\x18\x02\x20\x01(\x04R\x06length\x12\
    \x0e\n\x02to\x18\x03\x20\x01(\x04R\x02to\x12\x16\n\x06offset\x18\x04\x20\
    \x01(\x04R\x06offset\x120\n\x0ffragment_hashes\x18\x05\x20\x03(\x0b2\x07\
    .Hash32R\x0efragmentHashes\x123\n\rinline_stream\x18\x06\x20\x01(\x0b2\
    \x0e.WriteFragmentR\x0cinlineStream\"\xe4\x01\n\x12OpenWriteStreamAck\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\x123\n\x08ack_type\x18\x02\
    \x20\x01(\x0e2\x18.OpenWriteStreamAck.TypeR\x07ackType\x12%\n\rstream_ha\
    ndle\x18\x03\x20\x01(\x04H\0R\x0cstreamHandle\x12+\n\nsync_error\x18\x04\
    \x20\x01(\x0e2\n.SyncErrorH\0R\tsyncError\"*\n\x04Type\x12\n\n\x06Accept\
    \x10\0\x12\n\n\x06Reject\x10\x01\x12\n\n\x06Noneed\x10\x02B\t\n\x07conte\
    nt\"G\n\x10CloseWriteStream\x12\x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\
    \x12#\n\rstream_handle\x18\x02\x20\x01(\x04R\x0cstreamHandle\"P\n\x13Clo\
    seWriteStreamAck\x12\x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\x12)\n\nsyn\
    c_error\x18\x02\x20\x01(\x0e2\n.SyncErrorR\tsyncError\"H\n\x06Hash32\x12\
    \x0e\n\x02h1\x18\x01\x20\x01(\x04R\x02h1\x12\x0e\n\x02h2\x18\x02\x20\x01\
    (\x04R\x02h2\x12\x0e\n\x02h3\x18\x03\x20\x01(\x04R\x02h3\x12\x0e\n\x02h4\
    \x18\x04\x20\x01(\x04R\x02h4\"~\n\rWriteFragment\x12#\n\rstream_handle\
    \x18\x01\x20\x01(\x04R\x0cstreamHandle\x12\x16\n\x06offset\x18\x02\x20\
    \x01(\x04R\x06offset\x12\x16\n\x06length\x18\x03\x20\x01(\x04R\x06length\
    \x12\x18\n\x07content\x18\x04\x20\x01(\x0cR\x07content\"\xce\x01\n\x10Wr\
    iteFragmentAck\x121\n\x08ack_type\x18\x01\x20\x01(\x0e2\x16.WriteFragmen\
    tAck.TypeR\x07ackType\x12#\n\rstream_handle\x18\x02\x20\x01(\x04R\x0cstr\
    eamHandle\x12\x16\n\x06offset\x18\x03\x20\x01(\x04R\x06offset\x12)\n\nsy\
    nc_error\x18\x04\x20\x01(\x0e2\n.SyncErrorR\tsyncError\"\x1f\n\x04Type\
    \x12\x0c\n\x08Continue\x10\0\x12\t\n\x05Break\x10\x01\"B\n\x05Inbox\x12\
    \x16\n\x06unread\x18\x01\x20\x01(\x04R\x06unread\x12!\n\x0ctotal_length\
    \x18\x02\x20\x01(\x04R\x0btotalLength*\x19\n\tSyncError\x12\x0c\n\x08Res\
    ource\x10\0b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(14);
            messages.push(SyncMessage::generated_message_descriptor_data());
            messages.push(OpenNextInboxStreamAck::generated_message_descriptor_data());
            messages.push(ReadFragment::generated_message_descriptor_data());
            messages.push(ReadFragmentAck::generated_message_descriptor_data());
            messages.push(OpenWriteStream::generated_message_descriptor_data());
            messages.push(OpenWriteStreamAck::generated_message_descriptor_data());
            messages.push(CloseWriteStream::generated_message_descriptor_data());
            messages.push(CloseWriteStreamAck::generated_message_descriptor_data());
            messages.push(Hash32::generated_message_descriptor_data());
            messages.push(WriteFragment::generated_message_descriptor_data());
            messages.push(WriteFragmentAck::generated_message_descriptor_data());
            messages.push(Inbox::generated_message_descriptor_data());
            messages.push(open_next_inbox_stream_ack::ReadStream::generated_message_descriptor_data());
            messages.push(read_fragment_ack::Fragment::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(6);
            enums.push(SyncError::generated_enum_descriptor_data());
            enums.push(sync_message::Type::generated_enum_descriptor_data());
            enums.push(open_next_inbox_stream_ack::Type::generated_enum_descriptor_data());
            enums.push(read_fragment_ack::Type::generated_enum_descriptor_data());
            enums.push(open_write_stream_ack::Type::generated_enum_descriptor_data());
            enums.push(write_fragment_ack::Type::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
